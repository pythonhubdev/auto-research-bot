[tool.poetry]
name = "auto-research-bot"
version = "0.1.0"
description = "A Streamlit-based bot for automated research and report generation using Langchain and SQLAlchemy. Effortlessly create and manage chat sessions, generate detailed summaries, and save reports with ease."
authors = ["Vetrichelvan <pythonhubdev@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
httpx = "^0.27.0"
langchain = "^0.2.10"
loguru = "^0.7.2"
opentelemetry-api = "^1.25.0"
opentelemetry-sdk = "^1.25.0"
opentelemetry-exporter-otlp = "^1.25.0"
opentelemetry-instrumentation = "^0.46b0"
opentelemetry-instrumentation-fastapi = "^0.46b0"
opentelemetry-instrumentation-sqlalchemy = "^0.46b0"
pydantic-settings = "^2.3.4"
sqlalchemy = "^2.0.31"
streamlit = "^1.36.0"


mwparserfromhell = "^0.6.6"
openai = "^1.35.10"
langchain-community = "^0.2.6"
langchain-openai = "^0.1.14"
alembic = "^1.13.2"
[tool.poetry.group.dev.dependencies]
ruff = "^0.4.9"
pytest = "^8.2.2"
mypy = "^1.10.0"
isort = "^5.13.2"
pre-commit = "^3.7.1"
wemake-python-styleguide = "^0.19.2"
black = "^24.4.2"
pytest-cov = "^5.0.0"
anyio = "^4.4.0"
httpx = "^0.27.0"
pytest-env = "^1.1.3"

[tool.black]
line-length = 120
preview = true

[tool.ruff]
src = ["."]
target-version = "py312"
fix = true
output-format = "full"
line-length = 120

[tool.lint.isort]
profile = "black"
multi_line_output = 10
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
src_paths = ["auto_research_bot"]

[tool.ruff.lint]
select = ["E", "F", "N801", "N802", "N803", "N805", "N806", "Q0"]
ignore = ["F401"]

[tool.ruff.lint.flake8-quotes]
inline-quotes = "double"
multiline-quotes = "double"
docstring-quotes = "double"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.flake8-type-checking]
strict = true

[tool.ruff.lint.isort]
combine-as-imports = true

[tool.mypy]
strict = true
ignore_missing_imports = true
allow_subclassing_any = true
allow_untyped_calls = true
pretty = true
show_error_codes = true
implicit_reexport = true
allow_untyped_decorators = true
warn_unused_ignores = false
warn_return_any = false
namespace_packages = true


[pytest]
asyncio_mode = "auto"

[tool.pytest.ini_options]
filterwarnings = [
    "error",
    "ignore::DeprecationWarning",
    "ignore:.*unclosed.*:ResourceWarning",
]
env = [
    "ENVIRONMENT=pytest",
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
